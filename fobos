[modes]
modes = fundal-test-oac-mpi-nvf fundal-test-oac-mpi-nvf-debug fundal-test-oac-nvf fundal-test-nvf
        fundal-test-omp-mpi-ifx                               fundal-test-omp-ifx fundal-test-ifx
        fundal-test-oac-mpi-gnu                               fundal-test-oac-gnu fundal-test-gnu
                                                              fundal-void-oac-nvf fundal-void-nvf
                                                              fundal-void-omp-nvf fundal-void-ifx
                                                              fundal-void-oac-gnu fundal-void-gnu

# modes to build library and tests
[fundal-test-oac-mpi-nvf]
help     = Build FUNDAL tests with OpenACC-MPI-NVF
template = template-oac-nvf
mpi      = True
src      = ./src/

[fundal-test-oac-mpi-nvf-debug]
help     = Build FUNDAL tests with OpenACC-MPI-NVF in debug mode
template = template-oac-nvf-debug
mpi      = True
src      = ./src/

[fundal-test-oac-nvf]
help          = Build FUNDAL tests with OpenACC-NVF
template      = template-oac-nvf
src           = ./src/
exclude_dirs  = ./src/tests/mpi/

[fundal-test-nvf]
help          = Build FUNDAL tests with NVF
template      = template-nvf
src           = ./src/
exclude_dirs  = ./src/tests/mpi/

[fundal-test-omp-mpi-ifx]
help     = Build FUNDAL tests with OpenMP-MPI-IFX
template = template-omp-ifx
mpi      = True
src      = ./src/

[fundal-test-omp-ifx]
help          = Build FUNDAL tests with OpenMP-IFX
template      = template-omp-ifx
src           = ./src/
exclude_dirs  = ./src/tests/mpi/

[fundal-test-ifx]
help          = Build FUNDAL tests with IFX
template      = template-ifx
src           = ./src/
exclude_dirs  = ./src/tests/mpi/

[fundal-test-oac-mpi-gnu]
help     = Build FUNDAL tests with OpenACC-MPI-GNU
template = template-oac-gnu
mpi      = True
src      = ./src/

[fundal-test-oac-gnu]
help          = Build FUNDAL tests with OpenACC-GNU
template      = template-oac-gnu
src           = ./src/
exclude_dirs  = ./src/tests/mpi/

[fundal-test-gnu]
help          = Build FUNDAL tests with GNU
template      = template-gnu
src           = ./src/
exclude_dirs  = ./src/tests/mpi/

# void modes to build a specified target/src (-t/-src must be passed by CLI)
[fundal-void-oac-nvf]
help     = Build a specified target/src with OpenACC-NVF
template = template-oac-nvf

[fundal-void-nvf]
help     = Build a specified target/src with NVF (no pragmas)
template = template-nvf

[fundal-void-omp-ifx]
help     = Build a specified target/src with OpenMP-IFX
template = template-omp-ifx

[fundal-void-ifx]
help     = Build a specified target/src with IFX (no pragmas)
template = template-ifx

[fundal-void-oac-gnu]
help     = Build a specified target/src with OpenACC-GNU
template = template-oac-gnu

[fundal-void-gnu]
help     = Build a specified target/src with GNU (no pragmas)
template = template-gnu

# templates
[template-oac-nvf]
compiler  = nvfortran
preproc   = -DDEV_OAC -DCOMPILER_NVF
cflags    = -cpp -c -acc -gpu=cc89 -fast -Minfo=all
lflags    = -acc -gpu=cc89 -fast -Minfo=all
mod_dir   = ./mod/
obj_dir   = ./obj/
build_dir = ./exe/
colors    = True
quiet     = False
log       = True
jobs      = 4

[template-oac-nvf-debug]
compiler  = nvfortran
preproc   = -DDEV_OAC -DCOMPILER_NVF
cflags    = -cpp -c -acc -gpu=cc89 -Minfo=all -C -g
lflags    = -acc -gpu=cc89 -Minfo=all -C -g
mod_dir   = ./mod/
obj_dir   = ./obj/
build_dir = ./exe/
colors    = True
quiet     = False
log       = True
jobs      = 4

[template-nvf]
compiler  = nvfortran
preproc   = -DCOMPILER_NVF
cflags    = -cpp -c -fast -Minfo=all
lflags    = -Minfo=all
mod_dir   = ./mod/
obj_dir   = ./obj/
build_dir = ./exe/
colors    = True
quiet     = False
log       = True
jobs      = 4

[template-omp-ifx]
compiler       = intel_nextgen
preproc        = -DDEV_OMP -DCOMPILER_IFX
cflags         = -c -cpp
lflags         = -cpp
openmp         = True
openmp_offload = True
mod_dir        = ./mod/
obj_dir        = ./obj/
build_dir      = ./exe/
colors         = True
quiet          = False
log            = True
jobs           = 4

[template-ifx]
compiler  = intel_nextgen
preproc   = -DCOMPILER_IFX
cflags    = -c -cpp
lflags    = -cpp
openmp    = True
mod_dir   = ./mod/
obj_dir   = ./obj/
build_dir = ./exe/
colors    = True
quiet     = False
log       = True
jobs      = 4

[template-oac-gnu]
compiler  = gnu
preproc   = -DDEV_OAC -DCOMPILER_GNU
cflags    = -cpp -c -fopenacc
lflags    = -fopenacc
mod_dir   = ./mod/
obj_dir   = ./obj/
build_dir = ./exe/
colors    = True
quiet     = False
log       = True
jobs      = 4

[template-oac-gnu-debug]
compiler  = gnu
preproc   = -DDEV_OAC -DCOMPILER_GNU
cflags    = -cpp -c -fopenacc -g -fcheck=all -fbacktrace
lflags    = -fopenacc -g -fcheck=all -fbacktrace
mod_dir   = ./mod/
obj_dir   = ./obj/
build_dir = ./exe/
colors    = True
quiet     = False
log       = True
jobs      = 4

[template-gnu]
compiler  = gnu
preproc   = -DCOMPILER_GNU
cflags    = -cpp -c
lflags    = -cpp
mod_dir   = ./mod/
obj_dir   = ./obj/
build_dir = ./exe/
colors    = True
quiet     = False
log       = True
jobs      = 4

# aux rules
[rule-run-tests]
help   = Run all tests
rule_1 = utils/run_tests.sh

[rule-build-run-tests-oac-nvf]
help   = Build and Run all tests with OpenACC-NVF
rule_1 = FoBiS.py clean
rule_2 = FoBiS.py build -mode fundal-test-oac-nvf
rule_3 = FoBiS.py rule -ex run-tests

[rule-build-run-tests-omp-ifx]
help   = Build and Run all tests with OpenMP-IFX
rule_1 = FoBiS.py clean
rule_2 = FoBiS.py build -mode fundal-test-omp-ifx
rule_3 = FoBiS.py rule -ex run-tests

[rule-build-run-tests-oac-gnu]
help   = Build and Run all tests with OpenACC-GNU
rule_1 = FoBiS.py clean
rule_2 = FoBiS.py build -mode fundal-test-oac-gnu
rule_3 = FoBiS.py rule -ex run-tests

[rule-build-laplace-baseline-nvf]
help   = Build laplace test with NVF (without pragmas)
rule_1 = FoBiS.py clean
rule_2 = FoBiS.py build -mode fundal-void-nvf -t src/tests/laplace/fundal_laplace_baseline.F90 -s src/

[rule-build-laplace-oac-nvf]
help   = Build laplace test with OpenACC-NVF
rule_1 = FoBiS.py clean
rule_2 = FoBiS.py build -mode fundal-void-oac-nvf -t src/tests/laplace/fundal_laplace_dev_inline.F90 -s src/
rule_4 = FoBiS.py build -mode fundal-void-oac-nvf -t src/tests/laplace/fundal_laplace_dev_routine.F90 -s src/

[rule-build-laplace-baseline-ifx]
help   = Build laplace test with IFX (without pragmas)
rule_1 = FoBiS.py clean
rule_2 = FoBiS.py build -mode fundal-void-ifx -t src/tests/laplace/fundal_laplace_baseline.F90 -s src/

[rule-build-laplace-oac-ifx]
help   = Build laplace test with OpenMP-ifx
rule_1 = FoBiS.py clean
rule_2 = FoBiS.py build -mode fundal-void-omp-ifx -t src/tests/laplace/fundal_laplace_dev_inline.F90 -s src/
rule_4 = FoBiS.py build -mode fundal-void-omp-ifx -t src/tests/laplace/fundal_laplace_dev_routine.F90 -s src/

[rule-build-laplace-baseline-gnu]
help   = Build laplace test with GNU (without pragmas)
rule_1 = FoBiS.py clean
rule_2 = FoBiS.py build -mode fundal-void-gnu -t src/tests/laplace/fundal_laplace_baseline.F90 -s src/

[rule-build-laplace-oac-gnu]
help   = Build laplace test with OpenACC-GNU
rule_1 = FoBiS.py clean
rule_2 = FoBiS.py build -mode fundal-void-oac-gnu -t src/tests/laplace/fundal_laplace_dev_inline.F90 -s src/
rule_3 = FoBiS.py build -mode fundal-void-oac-gnu -t src/tests/laplace/fundal_laplace_dev_routine.F90 -s src/

[rule-build-compilers-proofs-oac-nvf]
help   = Build compilers proofs test with OpenACC-NVF
rule_1 = FoBiS.py clean
rule_2 = FoBiS.py build -mode fundal-void-oac-nvf -t ./compilers_proofs/oac/test_deviceptr.f90
rule_3 = FoBiS.py build -mode fundal-void-oac-nvf -t ./compilers_proofs/oac/test_present.f90

[rule-build-compilers-proofs-oac-gnu]
help   = Build compilers proofs test with OpenACC-GNU
rule_1 = FoBiS.py clean
rule_2 = FoBiS.py build -mode fundal-void-oac-gnu -t ./compilers_proofs/oac/test_deviceptr.f90
rule_3 = FoBiS.py build -mode fundal-void-oac-gnu -t ./compilers_proofs/oac/test_present.f90

[rule-makedoc]
help   = Build documentation from source files
rule_1 = rm -rf doc/html/*
rule_2 = ford doc/main_page.md --debug
rule_3 = cp -r doc/html/publish/* doc/html/
rule_4 = rm -rf doc/html/publish

[rule-deldoc]
help = Delete documentation
rule = rm -rf doc/html/*
